#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt 19.07

on:
  repository_dispatch:
#  release:
#    types: published
  push:
    branches:
      - main
    paths:
       - 'aaa'
#  schedule:
#    - cron: 0 8 * * 5
  watch:
    types: started

env:
  TZ: Asia/Shanghai
  branche: 19.07



jobs:
  build:
    runs-on: ubuntu-18.04   
    if: github.event.repository.owner.id == github.event.sender.id
    
#    defaults:
#      run:
#        working-directory: /home/runner/work/OpenWrtForMiWiFi19.07/
    
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: 
          - ac2100
          - r3
          - r3g
          - rm2100
          - packages
#          - ac2100-dev
#          - r3g-dev
#          - rm2100-dev

    steps:
    - name: Checkout
      uses: actions/checkout@main
      
    - name: Clone branche code
      working-directory: /home/runner/work/OpenWrtForMiWiFi/
      run: |
        rm -rf OpenWrtForMiWiFi
        git clone -b 19.07 https://github.com/0xc0000142/OpenWrtForMiWiFi.git OpenWrtForMiWiFi
    - name: Load Settings.ini
      run: |

        SSH_ACTIONS=true

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget swig rsync
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
    - name: Load custom feeds
      run: |
        [ -e common-all/$FEEDS_CONF ] && cp common-all/$FEEDS_CONF openwrt/feeds.conf.default
        [ -e $COMMON_DIR/$FEEDS_CONF ] && cp $COMMON_DIR/$FEEDS_CONF openwrt/feeds.conf.default
        [ -e config/${{matrix.target}}/$FEEDS_CONF ] && cp config/${{matrix.target}}/$FEEDS_CONF openwrt/feeds.conf.default
        if [ -f "common-all/$DIY_P1_SH" ]; then
        (
          chmod +x common-all/$DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/common-all/$DIY_P1_SH
          cd -
        )
        fi
        if [ -f "$COMMON_DIR/$DIY_P1_SH" ]; then
        (
          chmod +x $COMMON_DIR/$DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$COMMON_DIR/$DIY_P1_SH
          cd -
        )
        fi
        if [ -f "config/${{matrix.target}}/$DIY_P1_SH" ]; then
        (
          chmod +x config/${{matrix.target}}/$DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/config/${{matrix.target}}/$DIY_P1_SH
          cd -
        )
        fi
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e common-all/files ] && cp -rf common-all/files openwrt/files
        [ -e common-all/diy ] && cp -Rf common-all/diy/* openwrt
        [ -e $COMMON_DIR/files ] && cp -rf $COMMON_DIR/files openwrt/files
        [ -e $COMMON_DIR/diy ] && cp -Rf $COMMON_DIR/diy/* openwrt
        [ -e config/${{matrix.target}}/files ] && cp -rf config/${{matrix.target}}/files openwrt/files
        [ -e config/${{matrix.target}}/diy ] && cp -rf config/${{matrix.target}}/diy/* openwrt
        [ -e config/${{matrix.target}}/.config ] && cp config/${{matrix.target}}/.config openwrt/.config
        if [ -f "common-all/$DIY_P2_SH" ]; then
        (
          chmod +x common-all/$DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/common-all/$DIY_P2_SH
          cd -
        )
        fi
        if [ -f "$COMMON_DIR/$DIY_P2_SH" ]; then
        (
          chmod +x $COMMON_DIR/$DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$COMMON_DIR/$DIY_P2_SH
          cd -
        )
        fi
        if [ -f "config/${{matrix.target}}/$DIY_P2_SH" ]; then
        (
          chmod +x config/${{matrix.target}}/$DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/config/${{matrix.target}}/$DIY_P2_SH
          cd -
        )
        fi
    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@main
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile the firmware(Use Multithreading)
      id: compile
      if: env.USE_MULTI == 'true'
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=sc
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)"  >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")"  >> $GITHUB_ENV
        
    - name: Compile the firmware(Use Single thread)
      id: compile1
      if: env.USE_MULTI == 'false'
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j1 V=sc
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)"  >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")"  >> $GITHUB_ENV
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}_${{ env.FIRMWARE_TAG }}${{ env.FILE_DATE }}
        path: openwrt/bin
        
    - name: Upload packages directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_PACKAGES_DIR == 'true'
      with:
        name: OpenWrt_packages${{ env.FILE_DATE }}
        path: openwrt/bin/packages

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets
        rm -rf ./*/*/packages
        echo "name=FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}_${{ env.FIRMWARE_TAG }}${{ env.FILE_DATE }}
        path: openwrt/bin/targets

    - name: Upload firmware to cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
    - name: Upload firmware to WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
